#include "services_microboone.fcl"
#include "textfilegen_dm.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "time_memory_tracker_microboone.fcl"


process_name: DarkTridentGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "tfg_hist.root" }
  TimeTracker: {
    printSummary : true
    dbOutput     : {
      filename   :  "time.db"
      overwrite  :  true
    }
  }
  MemoryTracker:     { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_gen_services
  @table::microboone_g4_services
  IFDH:         {}
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen_dm
   rns:       { module_type: "RandomNumberSaver" }
   largeant:   @local::microboone_largeant
   drift:    {
                 module_type: SimDriftElectrons
                 SimulationLabel: "largeant:TPCActive"
             }
   ionization: {
                 module_type: "larsim/ElectronDrift/ShiftEdepSCE"
                 EDepTag:     "largeant:TPCActive"
                 MakeAnaTree: false
               }
    mcreco:    @local::standard_mcreco

 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, largeant, ionization]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "tfg_%tc_gen.root" #default file name, can override from command line with -o or --output
   dataTier:    "generated"
   compressionLevel: 1
 }
}


source.firstRun:8

#physics.producers.generator.InputFileName: "/uboone/app/users/anavrera/dark_tridents/hepevt/merged_1k_0.05.txt"

services.LArG4Parameters.FillSimEnergyDeposits:       true
#services.LArG4Parameters.NoElectronPropagation:       true
services.LArG4Parameters.InitialSimEnergyDepositSize: 100000

#physics.producers.largeant.KeepParticlesInVolumes: ["volCryostat"]


services.SpaceCharge.EnableSimSpatialSCE:          true
services.SpaceCharge.EnableSimEfieldSCE:           true
services.DetectorClocksService.InheritClockConfig: false